#!/bin/bash

OLD_PATH=$PATH

ANDROID_PATH=/system/bin:/system/bin:/product/bin:/vendor/bin
export PATH="/bin/:/sbin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:$ANDROID_PATH"

declare -A keyterms=(
	["1 android"]="release sdkInt buildNo suHandler gmsPrvd armLayer mac"
	["2 graphic"]="resolution dpi glVendor glRenderer glVersion"
	["3 kernel"]="version build arch uptime"
	["4 cpu"]="name arch cores vendor freqRange governor governors_avail"
	["5 gpu"]="name vendor"
	["6 mem"]="ram swap internalStorage totalStorage"
	["7 hw"]="model bios"
)

ARCH="$(busybox arch)"

android.release() { getprop ro.build.version.release; }

android.sdkInt() { getprop ro.build.version.sdk; }

android.buildNo() { getprop ro.build.display.id; }

android.suHandler() {
	local suHandler
	if ! command -v su; then
		suHandler=None
	elif modinfo ksu; then
		suHandler="KernelSU"
	elif [ -e "/sbin/magisk" ]; then
		suHandler="Magisk"
	else
		suHandler="SuperSU"
	fi >/dev/null 2>&1
	printf "%s" "$suHandler"
}

android.gmsPrvd() {
	local provider=Google gms=com.google.android.gms
	! pm list package | grep -q "$gms" && provider=None ||
		pm dump $gms | grep -q "org.microg.gms" && provider=MicroG
	printf "%s" "$provider"
}

android.armLayer() {
	local arm=None
	if [[ "$ARCH" = "aarch"* ]] || [[ "$ARCH" = "arm"* ]]; then
		arm=Native
	elif [ -e /system/lib/libhoudini.so ] || [ -e /vendor/lib/libhoudini.so ]; then
		arm=LibHoudini
	elif [ -e /system/lib/libndk_translation.so ] || [ -e /vendor/lib/libndk_translation.so ]; then
		arm=LibNDK
	fi
	printf "%s" "$arm"
}

android.mac() {
	ip link |
		grep "link/ether" |
		awk '{print $2}' |
		xargs
}

gfxdumpVarPreload="$(dumpsys SurfaceFlinger | grep GLES)"

graphic.resolution() { wm size | sed 's/.*: //'; }

graphic.dpi() { wm density | sed 's/.*: //' | xargs; }

graphic.glVendor() { echo "${gfxdumpVarPreload%%,*}" | sed 's/GLES: //'; }

graphic.glRenderer() { echo "${gfxdumpVarPreload#*, }" | cut -d , -f1; }

graphic.glVersion() { printf "%s" "${gfxdumpVarPreload##*, }"; }

kernel.version() { uname -r; }

kernel.build() { uname -v; }

kernel.arch() { uname -m; }

kernel.uptime() { cat /proc/uptime; }

cpuinfo=/sys/devices/system/cpu

cpu.name() { grep "model\ name" /proc/cpuinfo | uniq | sed 's/.*: //'; }

cpu.arch() { printf "%s" "$ARCH"; }

cpu.cores() { grep -c "processor" /proc/cpuinfo; }

cpu.vendor() { grep "vendor_id" /proc/cpuinfo | uniq | sed 's/.*: //'; }

cpu.freqRange() { cat $cpuinfo/cpu*/cpufreq/scaling_m??_freq | sort -nu | xargs; }

cpu.governor() { cat $cpuinfo/cpu*/cpufreq/scaling_governor | uniq | xargs; }

cpu.governors_avail() { cat $cpuinfo/cpu*/cpufreq/scaling_available_governors | uniq | xargs; }

gpuinfo=$(lspci | grep 'VGA' | sed 's/.*: \(.*\)(rev.*/\1/')

gpu.name() { printf "%s" "$gpuinfo"; }

gpu.vendor() { printf "%s" "${gpuinfo%% *}"; }

mem.ram() { free -k | grep Mem | awk '{print $2}'; }

mem.swap() { free -k | grep Swap | awk '{print $2}'; }

mem.internalStorage() { df -k /data | tail -1 | awk '{print $2}'; }

mem.totalStorage() {
	df -k |
		grep -E "^/dev/([hmnsv][dmrv]|xvd|nvme[0-9]n[0-9]p|mmcblk[0-9]p)[0-9a-z]*" |
		awk '{s+=$2} END {print s}'
}

hw.model() { getprop ro.product.model; }

hw.bios() {
	local mode=Legacy
	[ -d /sys/firmware/efi ] && mode="uEFI"
	printf "%s" "$mode"
}

for keyterm in "${!keyterms[@]}"; do
	for key in ${keyterms["$keyterm"]}; do
		printf "%s=%s\n" "${keyterm#* }.$key" "$(eval "${keyterm#* }.$key")"
	done | tac
done | tac

export PATH="$OLD_PATH"
