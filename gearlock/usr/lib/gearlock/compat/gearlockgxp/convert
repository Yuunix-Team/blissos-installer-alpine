#!/bin/bash

. /etc/gxp.conf

TOOLCHAIN=$GEARLIB/compat/gearlockgxp/toolchain
SECRET_KEY='2Xj^7pAz=UN#5%=#%XQAFY-tik^jh97sz6C&2x8-dH+xPjhoz#BzP5**uk+7XH7w'

ARCH=x86 # axon's gearlock  only support x86 32 bit
[ "$(busybox arch)" = x86_64 ] && ARCH=x86_64

die() { echo "==> ERROR: $1" >&2 && quit "${2:-1}"; }

quit() {
	cd "$CURRENT_DIR"
	rm -rf "$TMPDIR"
	exit "$1"
}

usage() {
	echo
}

while getopts "adpvh" opt; do
	case "$opt" in
	# A) ARCH="$OPTARG" ;;
	a) : "APKBUILD" ;;
	d) : "DEBIAN" ;;
	p) : "PKGBUILD" ;;
	v) : "XBPS" ;;
	h) usage && exit ;;
	*) usage && exit 1 ;;
	esac
	TYPE=$_
done
shift $((OPTIND - 1))

FILE=$1

if [ ! "$TYPE" ]; then
	for cmd in pacman xbps-src dpkg apk; do
		command -v $cmd || continue
		case "$cmd" in
		pacman) : "PKGBUILD" ;;
		xbps-src) : "XBPS" ;;
		dpkg) : "DEBIAN" ;;
		apk) : "APKBUILD" ;;
		esac
		TYPE=$_
		break
	done
fi

CONTENT=$("$TOOLCHAIN"/bin/garca l -p"$SECRET_KEY" "$FILE")

TMPDIR=$("$GEARLIB"/checkfree "$(
	printf "%s" "$CONTENT" | tail -1 | awk '{print $3}'
)") ||
	die "Not enough space to perform this action" 1

# check for !zygote.sh

printf "%s" "$CONTENT" | grep '!zygote.sh' ||
	die "'$FILE' is either corrupted or not supported ..." 2

CURRENT_DIR=$(pwd)

"$TOOLCHAIN"/bin/garca -o"$TMPDIR" -p"$SECRET_KEY" "$FILE" ||
	die "Failed to extract '$FILE'" 3

cd "$TMPDIR"
chmod +x '!zygote.sh'
. '!zygote.sh'

if [ -d "system/lib64" ] || [ -d "system/vendor/lib64" ]; then
	echo "WARNING: This package is intended to run on different architecture and it may not work on your machine"
	rm -r system/lib64 system/vendor/lib64 2>/dev/null
fi
# available variables are: NAME TYPE AUTHOR VERSION SHORTDESC REQSYNC REQREBOOT GEN_UNINS SHOW_PROG DEF_HEADER

# change name format to linux packagege
PKGNAME="${NAME// /_}"
PKGNAME="gearlockgxp_${PKGNAME,,}"

# parse version too
VERSION=$(echo "$VERSION" | sed -r 's/^.*[^0-9\.](([0-9]+\.)+[0-9]+).*$/\1/g')
VERSION=${VERSION:-"1.0"} # default value

SHORTDESC=${SHORTDESC#"Bakes you a cake @_@"}

reattr() {
	[ -e "$2" ] || return
	xargs -L1 $(eval echo "$1") <"$2" >/dev/null 2>&1
}

reattr "chmod" '.!zygote/mode'
reattr "ln -srf" '.!zygote/link'

# TODO:
# !!! if anything maches the examples, do NOT add
# if /system exists:
#	  if /system/lib/modules exists, make a split kernel package
#	  if /system/lib/firmware exists, make a split firmware package
#	  or else make it a flashable zip
# if /gearlock exists, make boot injecttion script

# shellcheck disable=2317
bindpkg() {
	TYPE=$1
	mkdir -p "$TMPDIR/usr/lib/$TYPE"
	cp -a "system/lib/$TYPE" "$TMPDIR/$(dirname "usr/lib/$TYPE")/$(basename "$TYPE")"

	case "$TYPE" in
	modules/*) for kernel in "$@"; do
		shift
		[ -f "$kernel" ] && cp "$kernel" "$TMPDIR/usr/lib/$1/kernel" && break
	done ;;
	esac

	MAKEFILE="
build:
	echo 'Creating package...'

install:
	cp -a /usr \$(DESTDIR)/
"
}

if [ -d system ]; then
	if [ -d system/lib/modules ]; then
		IS_KRL=true
		kernel=$(basename ./system/lib/modules/*)
		# shellcheck disable=2317
		move() { bindpkg modules/"$kernel" "kernel-su" "kernel"; }
		"$GEARLIB"/makepkg/genbuild \
			-A "$ARCH" \
			-D "${SHORTDESC:-"Linux kernel $kernel - GearLock GXP package by $AUTHOR"}" \
			-l "GPL2" \
			-M "$AUTHOR" \
			-N "linux-$kernel" \
			-O "$TMPDIR" \
			-v "${kernel%-*}" \
			-S "$(du -sk system/lib/modules | awk '{print $1}')" \
			-B "$MAKEFILE" &&
			rm -rf system/lib/modules/*
	fi

	if [ -d system/lib/firmware ]; then
		IS_FW=true
		# shellcheck disable=2317
		move() { bindpkg firmware; }
		"$GEARLIB"/makepkg/genbuild \
			-A "$ARCH" \
			-D "${SHORTDESC:-"Linux firmware - GearLock GXP package by $AUTHOR"}" \
			-l "GPL2 GPL3 custom" \
			-M "$AUTHOR" \
			-N "linux-firmware" \
			-O "$TMPDIR" \
			-v "$(printf "%s" "$CONTENT" | grep -E "system/lib/firmware$" | sed 's/^([0-9]{4})-([0-9]{2})-([0-9]{2}).*/\1\2\3/g')" \
			-S "$(du -sk system/lib/firmware | awk '{print $1}')" \
			-B "$MAKEFILE" &&
			rm -rf system/lib/firmware
	fi
fi

# shellcheck disable=2317
move() {
	if [ ! "$IS_KRL" ] && [ ! "$IS_FW" ]; then
		PKGDIR="$TMPDIR/$GEARDATA/extensions"
		PKG=legacy-$PKGDIR/${PKGNAME}.gxp

		mkdir -p "$PKG"
		mv -f system install.sh uninstall.sh '!zygote.sh' "$PKG"
	fi
	if [ -d gearlock ]; then
		filter_cmd() { [ "$(grep -Ev "^(#.*|\s*((nout )?(geco|echo|printf|check_compat)(\s+(['\"].*['\"])*)?[^|><]*))$" "$@")" ]; }
		# TODO: filter up sample/placeholer boot stages, and make boot injection scripts
		# shellcheck disable=2143
		if filter_cmd gearlock/extension.sh; then
			GXTDIR="$TMPDIR/$(dirname "$GEARDATA")/gearlock-legacy/extensions/$NAME"
			mkdir -p "$GXTDIR"
			mv gearlock/extension.sh "$GXTDIR"/
		fi
	fi
}

"$GEARLIB"/makepkg/genbuild \
	-A "$ARCH" \
	-D "${SHORTDESC:-"$NAME - GearLock GXP package by $AUTHOR"}" \
	-N "gearlockgxp-$PKGNAME" \
	-M "$AUTHOR" \
	-d "gearlock-core" \
	-v "$VERSION" \
	-S "$(du -sk . | awk '{print $1}')" \
	-B "$MAKEFILE"

quit 0
