#!/bin/bash

trap 'LAST_CMD=$CURRENT_CMD; CURRENT_CMD=$BASH_COMMAND' DEBUG

NEWIMG=$1
SYSTEM_TYPE=$2

COMP=dir
case "$NEWIMG" in *.?fs | *.img) COMP="${NEWIMG##*.}" ;; esac

if [ "$COMP" = "$SYSTEM_TYPE" ]; then
	echo "$NEWIMG"
	exit 0
fi

cancel_convert() {
	echo "Cancelling.." >&2
	case "${LAST_CMD%% *}" in
	rsync) rm -rf "$tmpdir" ;;
	rm) $LAST_CMD ;;
	esac
	[ "$UNMOUNT_LIST" ] && umount -l $UNMOUNT_LIST
	rm -rf "$TMPDIR"
	exit 2
}

trap 'cancel_convert' EXIT

fsize() { du -sk "$1" | awk '{print $1}'; }

check_space() {
	local mounted_dir
	case "$SYSTEM_TYPE" in
	dir | img) NEEDED_SPACE=$(fsize "$NEWIMG") ;;
	?fs)
		mounted_dir=$(loop_mount "$NEWIMG")
		mounted_size=$(fsize "$mounted_dir/system.img")
		umount "$mounted_dir"

		case "$COMP" in
		img) : "$mounted_size" ;;
		dir) : "$((mounted_size * 2))" ;;
		esac

		NEEDED_SPACE=$_
		;;
	esac

	TMPDIR=$("$GEARLIB"/checkfree "$NEEDED_SPACE") || exit 3

	mountpoint -q "$TMPDIR" && UNMOUNT_LIST="$UNMOUNT_LIST $TMPDIR"
}

check_space

loop_mount() {
	local disktmp
	disktmp="$(mktemp)"
	rm -f "$disktmp"
	mkdir -p "$disktmp" || true
	mount -o ro${2:+,$2} -t "${3:-auto}" "$1" "$disktmp" 2>/dev/null &&
		UNMOUNT_LIST="$disktmp $UNMOUNT_LIST" &&
		echo "$disktmp"
}

unpack() {
	local tmpdir
	tmpdir=$(loop_mount "$NEWIMG") &&
		NEWIMG=$tmpdir
}

dir_to_img() {
	local target tmpdir
	target=$TMPDIR/system.img
	truncate -s "$((NEEDED_SPACE + 4096))K" "$target" &&
		mkfs.ext4 "$target" &&
		tmpdir=$(loop_mount "$target") &&
		rsync -arKHEpAXogz --devices --specials "$NEWIMG/" "$tmpdir/" &&
		rm -rf "$NEWIMG" &&
		NEWIMG=$target
}

img_to_mode() {
	local target tmpdir
	target=$TMPDIR/system.$1
	tmpdir=$TMPDIR/$1
	mkdir -p "$tmpdir" &&
		mv "$NEWIMG" "$tmpdir/" &&
		case "$1" in
		sfs) mksquashfs "$tmpdir/" "$target" ${SFS_COMPRESSION:+-comp SFS_COMPRESSION} $SFS_COMPRESSION_OPTS ;;
		efs) mkfs.erofs ${EFS_COMPRESSION:+-z$EFS_COMPRESSION} $EFS_COMPRESSION_OPTS "$target" "$tmpdir/" ;;
		esac &&
		rm -rf "$tmpdir" &&
		NEWIMG=$target
}

case "$SYSTEM_TYPE" in
dir) case "$COMP" in
	img) unpack ;;
	?fs) unpack && unpack ;;
	esac ;;
img) case "$COMP" in
	dir) dir_to_img ;;
	?fs) unpack ;;
	esac ;;
?fs) case "$COMP" in
	dir) dir_to_img && img_to_mode "$SYSTEM_TYPE" ;;
	img) img_to_mode "$SYSTEM_TYPE" ;;
	?fs) [ "$COMP" != "$SYSTEM_TYPE" ] && unpack && img_to_mode "$SYSTEM_TYPE" ;;
	esac ;;
esac

export UNMOUNT_LIST TMPDIR
echo "$NEWIMG"
