#!/usr/bin/busybox sh
set -e

prefix="/usr"
exec_prefix="/usr"
datarootdir="/usr/share"

. "$pkgdatadir/grub-mkconfig_lib"

export TEXTDOMAIN=grub
export TEXTDOMAINDIR="${datarootdir}/locale"

prop() { echo -n "${1#*=}"; }
fprop() { grep -E "ro.$1" $BUILDPROP; }
bprop() { prop "$(fprop "build.$1=")"; }

BUILDPROP=/system/build.prop
buildver=$(fprop "([a-z]*).version" | grep -v build)

MODE=$("$GEARLIB"/sysup/checkab)

IFS="
"
for ver in $buildver; do
	case $ver in
	ro.bliss.*) OS="Bliss OS $(prop "$ver")" && break ;;
	ro.phoenix.*) OS="Phoenix OS $(prop "$ver")" && break ;;
	ro.primeos.*) OS="Prime OS $(prop "$ver")" && break ;;
	ro.lineage.*) OS="Lineage OS $(prop "$ver")" ;;
	*) OS="AOSP $(bprop "version.release") $(bprop "flavor")" ;;
	esac
done
unset IFS

case "$BOOT_PART" in
/dev/*) BOOT_DEVICE=$BOOT_PART ;;
*) BOOT_DEVICE=$ROOT ;;
esac
# loop-AES arranges things so that /dev/loop/X can be our root device, but
# the initrds that Linux uses don't like that.
if [ "$ROOT" ]; then
	case ${ROOT} in
	/dev/loop/* | /dev/loop[0-9])
		ROOT=$(losetup "${ROOT}" | sed -e "s/^[^(]*(\([^)]\+\)).*/\1/")
		;;
	esac

	ROOT_UUID=$(blkol UUID "$ROOT")
	ROOT_FS=$(blkol TYPE "$ROOT")
	# btrfs may reside on multiple devices. We cannot pass them as value of root= parameter
	# and mounting btrfs requires user space scanning, so force UUID in this case.
	if ! { [ -z "$ROOT_UUID" ] || [ "$GRUB_DISABLE_LINUX_UUID" = "true" ] ||
		[ -e "$ROOT" ] && uses_abstraction "$ROOT" lvm; }; then
		ROOT=UUID=$ROOT_UUID
	fi

	case "$ROOT_FS" in
	btrfs)
		rootsubvol="$(make_system_path_relative_to_its_root /)"
		rootsubvol="${rootsubvol#/}"
		if [ "x${rootsubvol}" != x ]; then
			GRUB_CMDLINE_ANDROID="$GRUB_CMDLINE_ANDROID ROOTFLAGS=subvol=${rootsubvol}"
		fi
		;;
	zfs)
		rpool=$(${grub_probe} --device "$ROOT" --target=fs_label 2>/dev/null || true)
		bootfs="$(make_system_path_relative_to_its_root / | sed -e "s,@$,,")"
		ROOT="ZFS=${rpool}${bootfs%/}"
		;;
	esac
fi

sub_indent() { echo -e "$submenu_indentation$*"; }

android_entry() {
	local title=$OS \
		kernel="$1" \
		initrd="$2" \
		type="$3" \
		system=$4

	case "$MODE" in
	ab) case "$system" in
		system_a*) title="$title - System A" ;;
		system_b*) title="$title - System B" ;;
		esac ;;
	esac

	cmdline="$GRUB_CMDLINE_ANDROID_DEFAULT $GRUB_CMDLINE_ANDROID"
	if [ "$type" != "default" ]; then
		title="$title, with ${kernel#*-}"
		case "$type" in
		freshboot)
			title="$title - Freshboot"
			cmdline="$cmdline MODE=freshboot"
			;;
		recovery)
			title="$title - Recovery"
			cmdline="$cmdline MODE=recovery"
			;;
		esac
	fi

	sub_indent "menuentry '$(echo "$title" | grub_quote)' --class android --class os \$menuentry_id_option '${OS// /_}${SRC:+-${SRC##*/}}-$type-$device_id' {"

	save_default_entry | grub_add_tab

	# Use ELILO's generic "efifb" when it's known to be available.
	# FIXME: We need an interface to select vesafb in case efifb can't be used.
	if [ ! "$GRUB_GFXPAYLOAD_LINUX" ]; then
		sub_indent "	load_video"
		grep -qx "CONFIG_FB_EFI=y" "${config}" 2>/dev/null &&
			grep -qx "CONFIG_VT_HW_CONSOLE_BINDING=y" "${config}" 2>/dev/null &&
			sub_indent "	set gfxpayload=keep"

	else
		[ "$GRUB_GFXPAYLOAD_LINUX" = text ] ||
			sub_indent "	load_video"
		sub_indent "	set gfxpayload=$GRUB_GFXPAYLOAD_LINUX"
	fi

	sub_indent "	insmod gzio"
	# echo "$disk" | sed "s/^/$submenu_indentation	/gm"
	printf '%s\n' "$(prepare_grub_to_access_device "$BOOT_DEVICE" | grub_add_tab)" |
		sed "s/^/$submenu_indentation/"

	sub_indent "	linux $kernel $cmdline root=/dev/ram0 ${ROOT:+"ROOT=$ROOT"} ${SRC:+"SRC=$SRC"} ${system:+"SYSTEM=$system"} ${DATA:+"DATA=$DATA"} ${GEARLOCK:+"GEARLOCK=$GEARLOCK"}"
	sub_indent "	initrd $initrd"

	sub_indent "}\n"
}

list=
add2list() { if grub_file_is_not_garbage "$1"; then list="$list $1"; fi; }
machine=$(uname -m)
case "$machine" in
i?86 | x86_64) for i in /boot/vmlinuz-* /vmlinuz-* /boot/kernel-*; do
	add2list "$i"
done ;;
*) for i in /boot/vmlinuz-* /boot/vmlinux-* /vmlinuz-* /vmlinux-* /boot/kernel-*; do
	add2list "$i"
done ;;
esac

case $machine in
i?86) GENKERNEL_ARCH="x86" ;;
mips | mips64) GENKERNEL_ARCH="mips" ;;
mipsel | mips64el) GENKERNEL_ARCH="mipsel" ;;
arm*) GENKERNEL_ARCH="arm" ;;
*) GENKERNEL_ARCH="$machine" ;;
esac

device_id=

# Perform a reverse version sort on the entire list.
# Temporarily replace the '.old' suffix by ' 1' and append ' 2' for all
# other files to order the '.old' files after their non-old counterpart
# in reverse-sorted order.

reverse_sorted_list=$(echo "$list" | tr ' ' '\n' | sed -e 's/\.old$/ 1/; / 1$/! s/$/ 2/' | version_sort -r | sed -e 's/ 1$/.old/; s/ 2$//')

if [ "$GRUB_TOP_LEVEL" ]; then
	reverse_sorted_list=$(grub_move_to_front "$GRUB_TOP_LEVEL" ${reverse_sorted_list})
fi

gen_menuentry() {
	title_correction_code=

	# Extra indentation to add to menu entries in a submenu. We're not in a submenu
	# yet, so it's empty. In a submenu it will be equal to '\t' (one tab).
	submenu_indentation=""
	is_top_level=true
	for linux in ${reverse_sorted_list}; do
		linux=${linux#*/}
		gettext_printf "Found linux image: %s\n" "$linux" >&2
		basename=$(basename "$linux")
		dirname=$(dirname "$linux")
		rel_dirname=$(make_system_path_relative_to_its_root "$dirname")
		version=${basename#*-}
		alt_version=${version%".old"}

		initrd_early=
		for i in ${GRUB_EARLY_INITRD_LINUX_STOCK} ${GRUB_EARLY_INITRD_LINUX_CUSTOM}; do
			[ -e "${dirname}/${i}" ] && initrd_early="${initrd_early} ${i}"
		done
		for i in /boot/*-uc.img /boot/*-ucode.img /boot/*-microcode.img /boot/microcode.cpio /boot/early_ucode.cpio; do
			[ -e "${i}" ] && initrd_early="${initrd_early} ${i##*/}"
		done

		initrd_real=
		for i in "initrd.img" "initrd-${version}.img" "initramfs-${version}.img" "initrd-${alt_version}.img" "initramfs-${alt_version}.img"; do
			if [ -e "${dirname}/${i}" ]; then
				initrd_real="${i}"
				break
			fi
		done

		initrd=
		if test -n "${initrd_early}" || test -n "${initrd_real}"; then
			initrd="${initrd_early} ${initrd_real}"

			initrd_display=
			for i in ${initrd}; do
				initrd_display="${initrd_display} ${dirname}/${i}"
			done
			gettext_printf "Found initrd image: %s\n" "$initrd_display" >&2
		fi

		config=
		for i in "${dirname}/config-${version}" "${dirname}/config-${alt_version}" "/etc/kernels/kernel-config-${version}"; do
			if test -e "${i}"; then
				config="${i}"
				break
			fi
		done

		# initramfs=
		# if test -n "${config}"; then
		# 	initramfs=$(grep CONFIG_INITRAMFS_SOURCE= "${config}" | cut -f2 -d= | tr -d \")
		# fi

		# if test -z "${initramfs}" && test -z "${initrd_real}"; then
		# 	# "UUID=" and "ZFS=" magic is parsed by initrd or initramfs.  Since there's
		# 	# no initrd or builtin initramfs, it can't work here.
		# 	if [ -z "$GRUB_DEVICE_PARTUUID" ] || [ "$GRUB_DISABLE_LINUX_PARTUUID" = "true" ]; then
		# 		android_root_device_thisversion=${ROOT}
		# 	else
		# 		android_root_device_thisversion=PARTUUID=${GRUB_DEVICE_PARTUUID}
		# 	fi
		# fi

		# The GRUB_DISABLE_SUBMENU option used to be different than others since it was
		# mentioned in the documentation that has to be set to 'y' instead of 'true' to
		# enable it. This caused a lot of confusion to users that set the option to 'y',
		# 'yes' or 'true'. This was fixed but all of these values must be supported now.
		if [ "$GRUB_DISABLE_SUBMENU" = yes ] || [ "$GRUB_DISABLE_SUBMENU" = y ]; then
			GRUB_DISABLE_SUBMENU="true"
		fi

		kpath=${rel_dirname}/${basename}
		ipath=
		IFS=" "
		for i in ${initrd}; do
			ipath="${ipath} ${rel_dirname}/${i}"
		done
		unset IFS

		[ "$device_id" ] || device_id="$(grub_get_device_id "$BOOT_DEVICE")"

		if [ "$is_top_level" = "true" ] && [ "$GRUB_DISABLE_SUBMENU" != "true" ]; then
			android_entry "$kpath" "$ipath" default "$1"

			submenu_indentation="$grub_tab"

			# TRANSLATORS: %s is replaced with an OS name
			echo "submenu '$(gettext_printf "Advanced options for %s" "${OS}" | grub_quote)' \$menuentry_id_option '${OS// /_}${SRC:+-${SRC##*/}}-advanced-$device_id' {"
			is_top_level=false
		fi

		android_entry "$kpath" "$ipath" advanced "$1"
		[ "$GRUB_DISABLE_ANDROID_FRESHBOOT" = "true" ] ||
			android_entry "$kpath" "$ipath" freshboot "$1"
		[ "$GRUB_DISABLE_ANDROID_RECOVERY" = "true" ] ||
			android_entry "$kpath" "$ipath" recovery "$1"
	done

	# If at least one kernel was found, then we need to
	# add a closing '}' for the submenu command.
	if [ "$is_top_level" != "true" ]; then
		echo '}'
	fi
}

case "$MODE" in
ab)
	echo "
case \"\$ACTIVE\" in
a) PRIMARY=a SECONDARY=b ;;
b) PRIMARY=b SECONDARY=a ;;
esac
"
	[ "$SYSTEM_TYPE" != dir ] && COMP=.$SYSTEM_TYPE
	for i in PRIMARY SECONDARY; do gen_menuentry "system_\$$i${COMP}"; done
	;;
*) gen_menuentry "$SYSTEM" ;;
esac

echo "$title_correction_code"
