#!/bin/bash
set -e

. "$pkgdatadir/grub-mkconfig_lib"

export TEXTDOMAIN=grub
export TEXTDOMAINDIR="${datarootdir}/locale"

CLASS="--class android --class os"
OS="Android"

# Default to disabling partition uuid support to maintian compatibility with
# older kernels.
: "${GRUB_DISABLE_LINUX_PARTUUID:=true}"

# Android x86 supported file systems
# Note that by default, Android initrds don't support btrfs and some other
# filesystems
: "${GRUB_ANDROID_SUPPORTED_FS:="ext2 ext3 ext4 vfat exfat ntfs"}"

# Excluded paths
# Start with a slash, separated by ',', ending slashes are not needed
: "${GRUB_ANDROID_EXCLUDE:="/bin,/boot/efi,/efi,/EFI,/dev,/etc,/lib,/lib64,/lib32,/proc,/run,/sbin,/sys,/usr,/var,/tmp,/Program Files,/Program Files (x86),/ProgramData,/Windows"}"

# Search image names
: "${GRUB_ANDROID_SEARCH:="system system.img system.sfs system.efs"}"

# Search recursiveness depth
: "${GRUB_ANDROID_SEARCH_DEPTH:=3}"

# Default parameters
: "${GRUB_CMDLINE_ANDROID:=""}"


. /etc/default/grub

DEPTH=$GRUB_ANDROID_SEARCH_DEPTH

po=
for f in ${GRUB_ANDROID_SEARCH}; do
	INCLUDE="$INCLUDE $po -name \"$f\""
	po="-o"
done

# check cpu architecure
machine=$(uname -m)
case "$machine" in
i?86 | x86_*) : x86 ;;
arm*) : arm ;;
*)
	echo "ERROR: Unsupported processor architecture!" >&2
	exit
	;;
esac
GENKERNEL_ARCH=$_

# check if cpu is 64 bit capable
LM=
grep -oqw 'lm' /proc/cpuinfo && LM=1

# check if kernel supports ntfs3
modinfo ntfs3 >/dev/null && NTFS=ntfs3 || NTFS=ntfs-3g

sub_indent() { echo -e "$submenu_indentation$*"; }
gfind() { grep "$2" <<<"${1}"; }
gprop() {
	local prop
	prop=$(gfind "${1}" "ro.$2=")
	echo "${prop##*=}"
}
gver() { gprop "${1}" "$2.version${3:+.$3}"; }

android_entry() {
	local title="$1" \
		src="$2" \
		kernel="$3" \
		initrd="$4" \
		disk="$5" \
		device_id="$6" \
		type="$7"

	[ "$type" != "default" ] &&
		title="$title, with ${kernel##*/}, and ${initrd##*/}"

	sub_indent "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option '$OS-${src##*/}-${kernel##*/}-${initrd##*/}-$type-$device_id' {"

	save_default_entry | grub_add_tab

	# Use ELILO's generic "efifb" when it's known to be available.
	# FIXME: We need an interface to select vesafb in case efifb can't be used.
	if [ ! "$GRUB_GFXPAYLOAD_LINUX" ]; then
		sub_indent "	load_video"
		grep -qx "CONFIG_FB_EFI=y" "${config}" 2>/dev/null &&
			grep -qx "CONFIG_VT_HW_CONSOLE_BINDING=y" "${config}" 2>/dev/null &&
			sub_indent "	set gfxpayload=keep"

	else
		[ "$GRUB_GFXPAYLOAD_LINUX" = text ] ||
			sub_indent "	load_video"
		sub_indent "	set gfxpayload=$GRUB_GFXPAYLOAD_LINUX"
	fi

	sub_indent "	insmod gzio"
	echo "$disk" | sed "s/^/$submenu_indentation	/gm"
	sub_indent "	linux $kernel $GRUB_CMDLINE_ANDROID root=/dev/ram0 SRC=$src"
	sub_indent "	initrd $initrd"

	sub_indent "}\n"
}

_mount_fs() {
	local disktmp
	disktmp="$(mktemp)"
	rm -f "$disktmp"
	mkdir -p "$disktmp" || true
	mount -o ro${2:+,$2} -t "${3:-auto}" "$1" "$disktmp" 2>/dev/null
	echo "$disktmp"
}

find_buildprop() {
	if [ -d "$1" ]; then
		local buildprop_file=$1/system/build.prop
		[ -f "$buildprop_file" ] || buildprop_file=$1/build.prop
		[ -f "$buildprop_file" ] || return 1
		cat "$buildprop_file"
	elif [ -f "$1" ]; then
		case "$1" in
		*system.img)
			imgdir="$(_mount_fs "$1" loop)" || return 1
			find_buildprop "$imgdir"
			umount -lf "$imgdir"
			rm -rf "$imgdir"
			;;
		*system.?fs)
			sfsdir="$(_mount_fs "$1" loop)" || return 1
			find_buildprop "$sfsdir/system.img"
			umount -lf "$sfsdir"
			rm -rf "$sfsdir"
			;;
		esac
	fi
	return $?
}

parse_path() {
	[ "${1}" ] || return 1
	local path=$1 \
		systempath=$1 \
		disk=$2 \
		boot_device_id=$3 \
		buildprop \
		abi \
		buildver \
		type \
		os \
		ver

	path=${path%/*}

	# Getting build.prop contents
	buildprop="$(find_buildprop "$systempath")" || return 1

	# Get abi
	abi=$(gprop "$buildprop" "product.cpu.abi")
	case "$abi" in *64*) [ "$LM" ] || return 1 ;;
	esac
	case "$abi" in
	x86*) : x86 ;;
	arm*) : arm ;;
	*) : ;;
	esac
	[ "$_" = "$GENKERNEL_ARCH" ] || return 1

	# Parse version
	buildver="$(grep -E "ro.([a-z]*).version" <<<"$(grep -v build <<<"${buildprop}")")"
	for version in $buildver; do
		case $version in
		ro.bliss.version*)
			os="Bliss OS"
			ver="$(gver "$buildver" "bliss")"
			break
			;;
		ro.phoenix.version*)
			os="Phoenix OS"
			ver="$(gver "$buildver" "phoenix" "code")"
			break
			;;
		ro.primeos.version*)
			os="Prime OS"
			ver="$(gver "$buildver" "primeos" "name")"
			break
			;;
		ro.lineage.version*)
			os="Lineage OS"
			ver="$(gver "$buildver" "lineage")"
			;;
		*)
			os="AOSP"
			ver="$(gver "$buildver" "build" "release") $(gprop "$buildprop" "build.flavor")"
			;;
		esac
	done

	echo "Found $os version $ver on $4" >&2

	type=default
	local src \
		MAIN_ENTRY \
		EXTENDED_ENTRIES \
		vendor
	src=$(echo "${path#"$mountpoint"}" | sed 's/ /\\ /g')

	# Extra indentation to add to menu entries in a submenu. We're not in a submenu
	# yet, so it's empty. In a submenu it will be equal to '\t' (one tab).
	submenu_indentation=""

	# Checking for cpu id/manufacturer and microcode file
	case "$(grep vendor_id /proc/cpuinfo | head -1 | awk '{print $3}')" in
	"GenuineIntel") : "intel" ;;
	"AuthenticAMD") : "amd" ;;
	esac
	vendor=$_
	microcode=$(find "$path" -maxdepth 1 -type f \( -iname "$vendor-ucode.img" -o -iname "$vendor-microcode.img" \) -print -quit 2>/dev/null)

	for kernel in "$path"/vmlinu[xz]* "$path"/kernel*; do
		[ -f "$kernel" ] || continue
		for initrd in "$path"/initrd*.img "$path"/initramfs*.img; do
			[ -f "$initrd" ] || continue

			entry() {
				android_entry \
					"$os $ver" \
					"$src" \
					"${src}${kernel#"$path"}" \
					"${microcode:+"${src}${microcode#"$path"} "}${src}${initrd#"$path"}" \
					"$disk" \
					"$boot_device_id" \
					"$1"
			}

			if [ "$type" = "default" ]; then
				MAIN_ENTRY="$(entry default)"
				type=extended
				submenu_indentation=$grub_tab
			fi
			EXTENDED_ENTRIES="$EXTENDED_ENTRIES\n$(entry extended)"
		done
	done

	echo -e "

$MAIN_ENTRY

submenu '$(echo "Advanced options for $os $ver" | grub_quote)' \$menuentry_id_option '$OS-${src##*/}-$type-$boot_device_id' { 
$EXTENDED_ENTRIES
}

"
}

find_os() {
	local pre_mounted \
		mountpoint \
		foundpaths \
		disk \
		boot_device_id
	pre_mounted="$(lsblk -pndo mountpoints "$1" | tail -1)"
	if [ "$pre_mounted" ]; then
		mountpoint="$pre_mounted"
	else
		fs=$2
		[ "$2" = "ntfs" ] && fs=$NTFS
		mountpoint="$(_mount_fs "$1" "" "$fs")"
	fi

	local EXCLUDE=
	IFS=,
	for dir in ${GRUB_ANDROID_EXCLUDE}; do
		EXCLUDE="$EXCLUDE -not \( -path \"${mountpoint}${dir/ /\\ }/*\" -prune \)"
	done
	unset IFS

	foundpaths="$(eval 'find "'"$mountpoint"'" -maxdepth '"$DEPTH"' \(' "$INCLUDE" '\)' "$EXCLUDE" 2>/dev/null)"

	if [ ! "$foundpaths" ]; then
		if [ ! "$pre_mounted" ]; then
			umount -lf "$mountpoint"
			rm -rf "$mountpoint"
		fi
		return
	fi

	# get device info (in grub)
	disk="$(prepare_grub_to_access_device "$1")"
	boot_device_id="$(grub_get_device_id "$1")"

	while read -r path; do
		parse_path "$path" "$disk" "$boot_device_id" "$1" || continue
	done <<<"$foundpaths"

	if [ ! "$pre_mounted" ]; then
		umount -lf "$mountpoint"
		rm -rf "$mountpoint"
	fi
}

echo "Detecting android..." >&2

# Scan for Android partitions that contain both system(folder, .img, .sfs)
# and data(folder, .img, .sfs)

while read -r blk; do
	blk_fs=$(lsblk -prndo fstype "$blk")
	[ "$blk_fs" ] &&
		gfind "$GRUB_ANDROID_SUPPORTED_FS" "$blk_fs" >/dev/null ||
		continue
	find_os "$blk" "$blk_fs"
done <<<"$(
	ls /sys/class/block/ |
		grep ".*[0-9]$" |
		grep -Ev "loop|ram|nbd|fd" |
		sed "s|^|/dev/|g"
)"
#địt mẹ nigga
